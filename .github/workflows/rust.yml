name: Test and Build Rust

on:
  push:
  pull_request:
  schedule:
    # Check if it works with current dependencies (weekly on Wednesday 2:32 UTC)
    - cron: '32 2 * * 3'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started

        ports:
          - 5432:5432

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          profile: minimal
          toolchain: stable
      
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose --all-targets --all-features -- -D warnings

      - name: Install diesel-cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: diesel_cli --no-default-features --features "postgres"
      
      - name: Setup db
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost/weather_bot"
        run: diesel setup
      
      - name: Run tests
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost/weather_bot"
          RUST_TELEGRAM_BOT_TOKEN : ${{ secrets.RUST_TELEGRAM_BOT_TOKEN }}
          OPEN_WEATHER_MAP_API_TOKEN: ${{ secrets.OPEN_WEATHER_MAP_API_TOKEN }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all-features

  release:
    name: Release x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3
          with:
            fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          target: x86_64-unknown-linux-gnu
          toolchain: stable

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --all-features --target x86_64-unknown-linux-gnu
      
      - name: Version release
          if: github.ref == 'refs/heads/master'
          uses: paulhatch/semantic-version@v4.0.2
          with:
            # The prefix to use to identify tags
            tag_prefix: "v"
            # A string which, if present in a git commit, indicates that a change represents a
            # major (breaking) change, supports regular expressions wrapped with '/'
            major_pattern: "(MAJOR)"
            # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
            minor_pattern: "(MINOR)"
            # A string to determine the format of the version output
            format: "${major}.${minor}.${patch}-prerelease${increment}"
            # Optional path to check for changes. If any changes are detected in the path the
            # 'changed' output will true. Enter multiple paths separated by spaces.
            change_path: "."
            # Named version, will be used as suffix for name version tag
            namespace: weather_bot_rust
            # If this is set to true, *every* commit will be treated as a new version.
            bump_each_commit: false
            # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
            search_commit_body: false
            # The output method used to generate list of users, 'csv' or 'json'.
            user_format_type: "json"


  build-container:
    name: Build and Push image to DockerHub.
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: pxp9/weather_bot_rust:latest
